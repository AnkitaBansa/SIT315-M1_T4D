#include <avr/io.h>
#include <avr/interrupt.h>

int motionSens = 7; // Change as necessary
const int soilMoist = A0;
const int ledPin = 3;    // Assuming the LED is connected to pin 3
const int buttonPin = 2; // Change this to the pin where your push button is connected
const int potPin = A1;    // Change this to the analog pin where your potentiometer is connected

bool buttonState = LOW;
bool lastButtonState = LOW;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;

volatile bool motionDetected = false; // Flag to indicate motion detection
volatile bool buttonInterruptFlag = false; // Flag to indicate button interrupt
volatile bool timerInterruptFlag = false;
bool ledState = LOW; // Initial state of the LED

void setup() {
  Serial.begin(9600);
  pinMode(motionSens, INPUT);
  pinMode(soilMoist, INPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP); // Internal pull-up resistor for the button

  // Setup Pin Change Interrupt for motion sensor and push button
  PCMSK2 |= (1 << PCINT18); // Enable PCINT18 (motion sensor)
  PCMSK2 |= (1 << PCINT23); // Enable PCINT23 (button)
  PCICR |= (1 << PCIE2);     // Enable PCIE2 (PCINT16-23)

  // Setup Timer1 for timer interrupt
  TCCR1A = 0; // Set entire TCCR1A register to 0
  TCCR1B = 0; // Same for TCCR1B
  TCNT1 = 0;  // Initialize counter value to 0
  OCR1A = 15624; // Set compare match register for 1Hz overflow (16MHz / (1024 * 1Hz) - 1)
  TCCR1B |= (1 << WGM12); // Turn on CTC mode
  TCCR1B |= (1 << CS12) | (1 << CS10); // Set CS12 and CS10 bits for 1024 prescaler
  TIMSK1 |= (1 << OCIE1A); // Enable timer compare interrupt
}

void loop() {
  // Read the soil moisture sensor
  int soilMoistValue = analogRead(soilMoist);

  // Check soil moisture level
  if (soilMoistValue > 500) { // You may need to adjust this threshold based on your sensor
    soilMoistInterrupt();
  }

  // Read the value of the potentiometer
  int potValue = analogRead(potPin);
  Serial.print("Potentiometer Value: ");
  Serial.println(potValue);

  // Your main loop code can be added here

  if (motionDetected) {
    motionInterrupt();
    motionDetected = false; // Reset the flag
  }

  if (buttonInterruptFlag) {
    buttonInterruptFlag = false; // Reset the flag
    buttonInterrupt(); // Call button interrupt function
  }

  if (timerInterruptFlag) {
    timerInterruptFlag = false; // Reset the flag
    timerInterrupt(); // Call timer interrupt function
  }

  delay(1000); 
}

void motionInterrupt() {
  // Toggle LED state or perform any action when motion is detected
  ledState = !ledState; // Toggle LED state
  digitalWrite(ledPin, ledState); // Update LED state
  if (ledState == HIGH) {
    Serial.println("Motion Detected - LED ON");
  } else {
    Serial.println("Motion Detected - LED OFF");
  }
}

void soilMoistInterrupt() {
  // Perform any action based on soil moisture level
  digitalWrite(ledPin, LOW); // Turn off the LED
  Serial.print("Soil Moisture Detected - Value: ");
  Serial.println(analogRead(soilMoist));
}

void buttonInterrupt() {
  // Perform any action when the button is pressed
  ledState = !ledState; // Toggle LED state
  digitalWrite(ledPin, ledState); // Update LED state
  if (ledState == HIGH) {
    Serial.println("Button Pressed - LED ON");
  } else {
    Serial.println("Button Pressed - LED OFF");
  }
}

void timerInterrupt() {
  // Perform any action when timer interrupt occurs
  ledState = !ledState; // Toggle LED state
  digitalWrite(ledPin, ledState); // Update LED state
  if (ledState == HIGH) {
    Serial.println("Timer Interrupt - LED ON");
  } else {
    Serial.println("Timer Interrupt - LED OFF");
  }
}

// Pin Change Interrupt Service Routine for motion sensor and push button
ISR(PCINT2_vect) {
  if (digitalRead(motionSens) == HIGH) {
    motionDetected = true;
  }
  if (digitalRead(buttonPin) == LOW) {
    buttonInterruptFlag = true; // Set the flag to indicate button interrupt
  }
}

// Timer1 Compare Match A interrupt service routine
ISR(TIMER1_COMPA_vect) {
  timerInterruptFlag = true; // Set the flag to indicate timer interrupt
}
